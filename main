import cv2
import numpy as np
import face_recognition
import os
cap=cv2.VideoCapture(0)
#mobcam='http://192.168.0.101:8080/video'
#cap.open(mobcam)
cap.set(3,640)            
cap.set(4,480)

path = 'face'
images = []
classnames = []
mylist = os.listdir(path)

for cls in mylist:
    curimg = cv2.imread(f'{path}/{cls}')
    images.append(curimg)
    classnames.append(os.path.splitext(cls)[0])


# encodings of images
def findencodings(images):
    encodelist = []
    for img in images:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        encode = face_recognition.face_encodings(img)[0]
        encodelist.append(encode)
    return encodelist


encodelistknown = findencodings(images)



classNames=[]
classFile="coco.names"
with open(classFile,'r+') as f:
    classNames=f.read().rstrip('\n').split('\n')

configPath="ssd_mobilenet_v3_large_coco_2020_01_14.pbtxt"
weightsPath="frozen_inference_graph.pb"
net=cv2.dnn_DetectionModel(weightsPath,configPath)
net.setInputSize(320,320)
net.setInputScale(1.0/127.5)
net.setInputMean((127.5,127.5,127.5))
net.setInputSwapRB(True)

  
while True:    
    success,img=cap.read()
    classIds,confidence,bbox=net.detect(img,confThreshold=0.5)
    print(classIds,bbox,confidence)
    

        
   
    if(len(classIds)!=0):
        
        for classId,confi,box in zip(classIds.flatten(),confidence.flatten(),bbox):
            if classId==1:
                imgs = cv2.resize(img, (0, 0), None, 0.25, 0.25) 
                imgs = cv2.cvtColor(imgs, cv2.COLOR_BGR2RGB)

                facescurframe = face_recognition.face_locations(imgs)
                encodescurframe = face_recognition.face_encodings(imgs, facescurframe)

                for encodeface, faceloc in zip(encodescurframe, facescurframe):
                    matches = face_recognition.compare_faces(encodelistknown, encodeface)
                    facedis = face_recognition.face_distance(encodelistknown, encodeface)
                    matchindex = np.argmin(facedis)

                    if matches[matchindex]:
                        name = classnames[matchindex].upper()
                        print(name)
                        y1, x2, y2, x1 = faceloc
                        y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4
                        cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
                        cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 255, 0), cv2.FILLED) 
                        cv2.putText(img, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)
                    elif matches[matchindex]==False:
                        cv2.rectangle(img,box,color=(255,0,0),thickness=2)
                        cv2.putText(img,'PERSON',(box[0]+10,box[1]+30),cv2.FONT_HERSHEY_COMPLEX,1,(255,0,0),2)

                        
                        
                      
            else: 
                
                cv2.rectangle(img,box,color=(255,0,0),thickness=2)
                cv2.putText(img,classNames[classId-1].upper(),(box[0]+10,box[1]+30),cv2.FONT_HERSHEY_COMPLEX,1,(255,0,0),2)

        cv2.imshow("Output",img)
        cv2.waitKey(1)
